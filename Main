#include <Adafruit_MPU6050.h>            // Library for the MPU6050 accelerometer/gyroscope
#include <Adafruit_Sensor.h>             // Base class for sensors
#include <Adafruit_NeoPixel.h>           // Library for controlling NeoPixel LEDs
#include <Wire.h>                        // Library for I2C communication

#define LED_PIN    5                     // The data pin connected to the NeoPixel ring
#define LED_COUNT  12                    // Total number of NeoPixel LEDs in the ring

const int twistPin = 2;                  // Digital input pin for twist button
const int pullPin = 3;                   // Digital input pin for pull button
const int resetPin = 4;                  // Digital output pin used for game reset

Adafruit_NeoPixel ring(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);  // Create NeoPixel object
Adafruit_MPU6050 mpu;                    // Create MPU6050 object

int score = 0;                           // Player score
int Random = 1;                          // Stores randomly chosen next action
int caseCheckup = 0;                     // Stores which action was triggered

unsigned long prevTime = 0;             // Timestamp for last action
int gameTime = 4000;                     // Allowed time to perform an action (ms)
const int timePenalty = 300;             // Time penalty when score increases
const int shakeTreshhold = 30;           // Minimum acceleration to count as "bob" motion

int pullState = LOW;                     // Current state of pull button
int lastpullState = LOW;                 // Previous state of pull button
unsigned long lastpullDebounceTime = 0;  // Debounce timer for pull button

int twistState = LOW;                    // Current state of twist button
int lasttwistState = LOW;                // Previous state of twist button
unsigned long lasttwistDebounceTime = 0; // Debounce timer for twist button

unsigned long debounceDelay = 0;         // (Unused) Debounce delay value

void setup() {
  Serial.begin(115200);                  // Start serial communication

  while (!Serial)
    delay(10);                           // Wait for serial port (useful for some boards)

  Serial.println("Adafruit MPU6050 test!");

  if (!mpu.begin()) {                    // Initialize MPU6050 sensor
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);                         // Halt if sensor not found
    }
  }
  Serial.println("MPU6050 Found!");

  ring.begin();                          // Initialize NeoPixel ring
  ring.show();                           // Clear all LEDs
  ring.setBrightness(50);                // Set LED brightness

  pinMode(twistPin, INPUT_PULLUP);       // Set twist pin as input with pull-up
  pinMode(pullPin, INPUT_PULLUP);        // Set pull pin as input with pull-up
  pinMode(resetPin, OUTPUT);             // Set reset pin as output
  digitalWrite(resetPin, HIGH);          // Set reset pin HIGH (idle state)

  startGame();                           // Start game sequence
}

void loop() {
  bobCheck();                            // Check for bob (shake) action
  twistCheck();                          // Check for twist button press
  pullCheck();                           // Check for pull button press
  timeCheck();                           // Check if time expired

  if(caseCheckup != 0){                  // If an action was detected or time ran out
    switch(caseCheckup){
      case 1:                            // Case for bob-it
      switch(Random){
        case 1:                          // Correct action
          score++;
          if(score % 5 == 0){
            gameTime = gameTime - timePenalty;  // Increase difficulty every 5 points
          }
          Serial.println("Bob Right");
        break;

        case 2:                          // Incorrect action
          endGame();
        break;

        case 3:                          // Incorrect action
          endGame();
        break;
      }
      break;

      case 2:                            // Case for twist-it
      switch(Random){
        case 2:                          // Correct action
          score++;
          if(score % 5 == 0){
            gameTime = gameTime - timePenalty;
          }
          Serial.println("Twist Right");
        break;

        case 1:                          // Incorrect action
          endGame();
        break;

        case 3:                          // Incorrect action
          endGame();
        break;
      }
      break;

      case 3:                            // Case for pull-it
      switch(Random){
        case 3:                          // Correct action
          score++;
          if(score % 5 == 0){
            gameTime = gameTime - timePenalty;
          }
          Serial.println("Pull Right");
        break;

        case 2:                          // Incorrect action
          endGame();
        break;

        case 1:                          // Incorrect action
          endGame();
        break;
      }
      break;

      case 4:                            // Time expired
      Serial.println("Timer over");
      endGame();
      break;

    } 

      clearLed();                        // Turn off LEDs
      delay(400);                        // Short pause between prompts
      caseCheckup = 0;                   // Reset action check
      prevTime = millis();               // Reset timer
      Random = random(1,4);              // Choose new random action

      switch(Random){
        case 1:
          bobLed();                      // Show bob-it prompt
          Serial.println("Bob-it");
        break;

        case 2:
          twistLed();                    // Show twist-it prompt
          Serial.println("Twist-it");
        break;

        case 3:
          pullLed();                     // Show pull-it prompt
          Serial.println("Pull-it");
        break;
      }
  }
}

// Setup functions

void startGame(){
  startAnimation();                      // Show startup animation
  bobLed();                              // Show first prompt
}

void endGame(){
  errorAnimation();                      // Flash red LEDs to signal game over
  scoreLed();                            // Show score using LEDs

  delay(5000);                           // Pause before reset
  digitalWrite(resetPin, LOW);           // Trigger game reset
}

// Checkup functions

void bobCheck(){
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);           // Read accelerometer data
  int Totalacc = (int)sqrt(             // Calculate total acceleration vector
    a.acceleration.x * a.acceleration.x +
    a.acceleration.y * a.acceleration.y +
    a.acceleration.z * a.acceleration.z
  );
  if(Totalacc >= shakeTreshhold){       // If shake strong enough
    caseCheckup = 1;                     // Register bob action
  }
}

void twistCheck(){
  if(digitalRead(twistPin) == LOW){     // If twist button is pressed
    caseCheckup = 2;                     // Register twist action
  }
}

void pullCheck(){
  if(digitalRead(pullPin) == LOW){      // If pull button is pressed
    caseCheckup = 3;                     // Register pull action
  }
}

void timeCheck(){
  if(millis() - prevTime > gameTime){   // If time has expired
    caseCheckup = 4;                     // Register timeout
  }
}

// NeoPixel functions

void startAnimation() {
  for (int cycle = 0; cycle < 2; cycle++) {  // Repeat animation 2 times
    for (int i = 0; i < LED_COUNT; i++) {
      uint32_t color = ring.ColorHSV((i * 65536L / LED_COUNT) + (cycle * 20000), 255, 255); // Rainbow effect
      ring.setPixelColor(i, color);
      ring.show();
      delay(50);  // Delay between pixels for wipe effect
    }
    delay(300);    // Pause after full loop
    clearLed();    // Clear LEDs between cycles
  }
}

void errorAnimation() {
for (int i = 0; i < 3; i++) {            // Repeat red flash 3 times
    for (int j = 0; j < LED_COUNT; j++) {
      ring.setPixelColor(j, ring.Color(255, 0, 0));  // Set all LEDs red
    }
    ring.show();
    delay(250);

    for (int j = 0; j < LED_COUNT; j++) {
      ring.setPixelColor(j, 0);          // Turn off all LEDs
    }
    ring.show();
    delay(250);
  }
}

void scoreLed() {
  clearLed();                            // Turn off LEDs first
  int ledIndex = 0;

  while (score >= 10 && ledIndex < LED_COUNT) {
    ring.setPixelColor(ledIndex++, ring.Color(255, 0, 0));  // Red = 10 points
    score -= 10;
  }

  while (score >= 5 && ledIndex < LED_COUNT) {
    ring.setPixelColor(ledIndex++, ring.Color(0, 0, 255));  // Blue = 5 points
    score -= 5;
  }

  while (score >= 1 && ledIndex < LED_COUNT) {
    ring.setPixelColor(ledIndex++, ring.Color(0, 255, 0));  // Green = 1 point
    score -= 1;
  }
  ring.show();                           // Show score on LED ring
}

void bobLed() {
for (int i = 0; i < LED_COUNT; i++) {
    ring.setPixelColor(i, ring.Color(255, 255, 255));  // Set all LEDs white
  }
  ring.show();                           // Display LEDs
}

void twistLed() {
for (int i = 0; i < LED_COUNT; i++) {
    ring.setPixelColor(i, ring.Color(0, 0, 255));      // Set all LEDs blue
  }
  ring.show();                           // Display LEDs
}

void pullLed() {
for (int i = 0; i < LED_COUNT; i++) {
    ring.setPixelColor(i, ring.Color(255, 255, 0));    // Set all LEDs yellow
  }
  ring.show();                           // Display LEDs
}

void clearLed() {
  for (int i = 0; i < LED_COUNT; i++) {
    ring.setPixelColor(i, 0);            // Turn off each LED
  }
  ring.show();                           // Update the ring
}
